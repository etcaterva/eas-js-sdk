/**
 * EAS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.2.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DrawTossPayload', 'model/Participant', 'model/Raffle', 'model/RaffleResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DrawTossPayload'), require('../model/Participant'), require('../model/Raffle'), require('../model/RaffleResult'));
  } else {
    // Browser globals (root is window)
    if (!root.EchaloasuerteJsSdk) {
      root.EchaloasuerteJsSdk = {};
    }
    root.EchaloasuerteJsSdk.RaffleApi = factory(root.EchaloasuerteJsSdk.ApiClient, root.EchaloasuerteJsSdk.DrawTossPayload, root.EchaloasuerteJsSdk.Participant, root.EchaloasuerteJsSdk.Raffle, root.EchaloasuerteJsSdk.RaffleResult);
  }
}(this, function(ApiClient, DrawTossPayload, Participant, Raffle, RaffleResult) {
  'use strict';

  /**
   * Raffle service.
   * @module api/RaffleApi
   * @version 0.0.1
   */

  /**
   * Constructs a new RaffleApi. 
   * @alias module:api/RaffleApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * @param {module:model/Raffle} raffle 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Raffle} and HTTP response
     */
    this.raffleCreateWithHttpInfo = function(raffle) {
      var postBody = raffle;

      // verify the required parameter 'raffle' is set
      if (raffle === undefined || raffle === null) {
        throw new Error("Missing the required parameter 'raffle' when calling raffleCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Raffle;

      return this.apiClient.callApi(
        '/raffle/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {module:model/Raffle} raffle 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Raffle}
     */
    this.raffleCreate = function(raffle) {
      return this.raffleCreateWithHttpInfo(raffle)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id 
     * @param {module:model/Participant} participant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.raffleParticipantsAddWithHttpInfo = function(id, participant) {
      var postBody = participant;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling raffleParticipantsAdd");
      }

      // verify the required parameter 'participant' is set
      if (participant === undefined || participant === null) {
        throw new Error("Missing the required parameter 'participant' when calling raffleParticipantsAdd");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/raffle/{id}/participants/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} id 
     * @param {module:model/Participant} participant 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.raffleParticipantsAdd = function(id, participant) {
      return this.raffleParticipantsAddWithHttpInfo(id, participant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Raffle} and HTTP response
     */
    this.raffleReadWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling raffleRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Raffle;

      return this.apiClient.callApi(
        '/raffle/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Raffle}
     */
    this.raffleRead = function(id) {
      return this.raffleReadWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id 
     * @param {module:model/DrawTossPayload} drawTossPayload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RaffleResult} and HTTP response
     */
    this.raffleTossWithHttpInfo = function(id, drawTossPayload) {
      var postBody = drawTossPayload;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling raffleToss");
      }

      // verify the required parameter 'drawTossPayload' is set
      if (drawTossPayload === undefined || drawTossPayload === null) {
        throw new Error("Missing the required parameter 'drawTossPayload' when calling raffleToss");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RaffleResult;

      return this.apiClient.callApi(
        '/raffle/{id}/toss/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} id 
     * @param {module:model/DrawTossPayload} drawTossPayload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RaffleResult}
     */
    this.raffleToss = function(id, drawTossPayload) {
      return this.raffleTossWithHttpInfo(id, drawTossPayload)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
