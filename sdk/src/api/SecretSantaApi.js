/**
 * EAS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateSecretSantaPayload from '../model/CreateSecretSantaPayload';
import SecretSantaAdminResponse from '../model/SecretSantaAdminResponse';
import SecretSantaCreateResponse from '../model/SecretSantaCreateResponse';
import SecretSantaErrorResponse from '../model/SecretSantaErrorResponse';
import SecretSantaResendEmail from '../model/SecretSantaResendEmail';
import SecretSantaResendEmailResponse from '../model/SecretSantaResendEmailResponse';
import SecretSantaResult from '../model/SecretSantaResult';

/**
* SecretSanta service.
* @module api/SecretSantaApi
* @version 1.0.0
*/
export default class SecretSantaApi {

    /**
    * Constructs a new SecretSantaApi. 
    * @alias module:api/SecretSantaApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * @param {module:model/CreateSecretSantaPayload} createSecretSantaPayload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecretSantaCreateResponse} and HTTP response
     */
    secretSantaCreateWithHttpInfo(createSecretSantaPayload) {
      let postBody = createSecretSantaPayload;
      // verify the required parameter 'createSecretSantaPayload' is set
      if (createSecretSantaPayload === undefined || createSecretSantaPayload === null) {
        throw new Error("Missing the required parameter 'createSecretSantaPayload' when calling secretSantaCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SecretSantaCreateResponse;
      return this.apiClient.callApi(
        '/secret-santa/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/CreateSecretSantaPayload} createSecretSantaPayload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SecretSantaCreateResponse}
     */
    secretSantaCreate(createSecretSantaPayload) {
      return this.secretSantaCreateWithHttpInfo(createSecretSantaPayload)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecretSantaAdminResponse} and HTTP response
     */
    secretSantaResultAdminGetWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling secretSantaResultAdminGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SecretSantaAdminResponse;
      return this.apiClient.callApi(
        '/secret-santa-admin/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SecretSantaAdminResponse}
     */
    secretSantaResultAdminGet(id) {
      return this.secretSantaResultAdminGetWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} drawId 
     * @param {String} resultId 
     * @param {Object} opts Optional parameters
     * @param {module:model/SecretSantaResendEmail} [secretSantaResendEmail] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecretSantaResendEmailResponse} and HTTP response
     */
    secretSantaResultAdminPostWithHttpInfo(drawId, resultId, opts) {
      opts = opts || {};
      let postBody = opts['secretSantaResendEmail'];
      // verify the required parameter 'drawId' is set
      if (drawId === undefined || drawId === null) {
        throw new Error("Missing the required parameter 'drawId' when calling secretSantaResultAdminPost");
      }
      // verify the required parameter 'resultId' is set
      if (resultId === undefined || resultId === null) {
        throw new Error("Missing the required parameter 'resultId' when calling secretSantaResultAdminPost");
      }

      let pathParams = {
        'draw_id': drawId,
        'result_id': resultId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SecretSantaResendEmailResponse;
      return this.apiClient.callApi(
        '/secret-santa-admin/{draw_id}/{result_id}/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} drawId 
     * @param {String} resultId 
     * @param {Object} opts Optional parameters
     * @param {module:model/SecretSantaResendEmail} opts.secretSantaResendEmail 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SecretSantaResendEmailResponse}
     */
    secretSantaResultAdminPost(drawId, resultId, opts) {
      return this.secretSantaResultAdminPostWithHttpInfo(drawId, resultId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecretSantaResult} and HTTP response
     */
    secretSantaResultGetWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling secretSantaResultGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SecretSantaResult;
      return this.apiClient.callApi(
        '/secret-santa/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SecretSantaResult}
     */
    secretSantaResultGet(id) {
      return this.secretSantaResultGetWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
