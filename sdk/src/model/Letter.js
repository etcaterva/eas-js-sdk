/**
 * EAS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BaseDraw from './BaseDraw';
import DrawMetadata from './DrawMetadata';
import LetterAllOf from './LetterAllOf';
import LetterResult from './LetterResult';

/**
 * The Letter model module.
 * @module model/Letter
 * @version 0.0.1
 */
class Letter {
    /**
     * Constructs a new <code>Letter</code>.
     * @alias module:model/Letter
     * @implements module:model/BaseDraw
     * @implements module:model/LetterAllOf
     */
    constructor() { 
        BaseDraw.initialize(this);LetterAllOf.initialize(this);
        Letter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Letter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Letter} obj Optional instance to populate.
     * @return {module:model/Letter} The populated <code>Letter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Letter();
            BaseDraw.constructFromObject(data, obj);
            LetterAllOf.constructFromObject(data, obj);

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('private_id')) {
                obj['private_id'] = ApiClient.convertToType(data['private_id'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], [DrawMetadata]);
            }
            if (data.hasOwnProperty('payments')) {
                obj['payments'] = ApiClient.convertToType(data['payments'], ['String']);
            }
            if (data.hasOwnProperty('number_of_results')) {
                obj['number_of_results'] = ApiClient.convertToType(data['number_of_results'], 'Number');
            }
            if (data.hasOwnProperty('allow_repeated_results')) {
                obj['allow_repeated_results'] = ApiClient.convertToType(data['allow_repeated_results'], 'Boolean');
            }
            if (data.hasOwnProperty('results')) {
                obj['results'] = ApiClient.convertToType(data['results'], [LetterResult]);
            }
        }
        return obj;
    }


}

/**
 * @member {String} id
 */
Letter.prototype['id'] = undefined;

/**
 * @member {Date} created_at
 */
Letter.prototype['created_at'] = undefined;

/**
 * @member {Date} updated_at
 */
Letter.prototype['updated_at'] = undefined;

/**
 * @member {String} title
 */
Letter.prototype['title'] = undefined;

/**
 * @member {String} description
 */
Letter.prototype['description'] = undefined;

/**
 * @member {String} private_id
 */
Letter.prototype['private_id'] = undefined;

/**
 * @member {Array.<module:model/DrawMetadata>} metadata
 */
Letter.prototype['metadata'] = undefined;

/**
 * @member {Array.<module:model/Letter.PaymentsEnum>} payments
 */
Letter.prototype['payments'] = undefined;

/**
 * @member {Number} number_of_results
 * @default 1
 */
Letter.prototype['number_of_results'] = 1;

/**
 * @member {Boolean} allow_repeated_results
 * @default true
 */
Letter.prototype['allow_repeated_results'] = true;

/**
 * @member {Array.<module:model/LetterResult>} results
 */
Letter.prototype['results'] = undefined;


// Implement BaseDraw interface:
/**
 * @member {String} id
 */
BaseDraw.prototype['id'] = undefined;
/**
 * @member {Date} created_at
 */
BaseDraw.prototype['created_at'] = undefined;
/**
 * @member {Date} updated_at
 */
BaseDraw.prototype['updated_at'] = undefined;
/**
 * @member {String} title
 */
BaseDraw.prototype['title'] = undefined;
/**
 * @member {String} description
 */
BaseDraw.prototype['description'] = undefined;
/**
 * @member {String} private_id
 */
BaseDraw.prototype['private_id'] = undefined;
/**
 * @member {Array.<module:model/DrawMetadata>} metadata
 */
BaseDraw.prototype['metadata'] = undefined;
/**
 * @member {Array.<module:model/BaseDraw.PaymentsEnum>} payments
 */
BaseDraw.prototype['payments'] = undefined;
// Implement LetterAllOf interface:
/**
 * @member {Number} number_of_results
 * @default 1
 */
LetterAllOf.prototype['number_of_results'] = 1;
/**
 * @member {Boolean} allow_repeated_results
 * @default true
 */
LetterAllOf.prototype['allow_repeated_results'] = true;
/**
 * @member {Array.<module:model/LetterResult>} results
 */
LetterAllOf.prototype['results'] = undefined;



/**
 * Allowed values for the <code>payments</code> property.
 * @enum {String}
 * @readonly
 */
Letter['PaymentsEnum'] = {

    /**
     * value: "CERTIFIED"
     * @const
     */
    "CERTIFIED": "CERTIFIED",

    /**
     * value: "ADFREE"
     * @const
     */
    "ADFREE": "ADFREE",

    /**
     * value: "SUPPORT"
     * @const
     */
    "SUPPORT": "SUPPORT"
};



export default Letter;

