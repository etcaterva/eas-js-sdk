/**
 * EAS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LinkFields model module.
 * @module model/LinkFields
 * @version 1.0.0
 */
class LinkFields {
    /**
     * Constructs a new <code>LinkFields</code>.
     * @alias module:model/LinkFields
     * @param itemsSet1 {Array.<String>} 
     * @param itemsSet2 {Array.<String>} 
     */
    constructor(itemsSet1, itemsSet2) { 
        
        LinkFields.initialize(this, itemsSet1, itemsSet2);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, itemsSet1, itemsSet2) { 
        obj['items_set1'] = itemsSet1;
        obj['items_set2'] = itemsSet2;
    }

    /**
     * Constructs a <code>LinkFields</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LinkFields} obj Optional instance to populate.
     * @return {module:model/LinkFields} The populated <code>LinkFields</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LinkFields();

            if (data.hasOwnProperty('items_set1')) {
                obj['items_set1'] = ApiClient.convertToType(data['items_set1'], ['String']);
            }
            if (data.hasOwnProperty('items_set2')) {
                obj['items_set2'] = ApiClient.convertToType(data['items_set2'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LinkFields</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LinkFields</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LinkFields.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['items_set1'])) {
            throw new Error("Expected the field `items_set1` to be an array in the JSON data but got " + data['items_set1']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['items_set2'])) {
            throw new Error("Expected the field `items_set2` to be an array in the JSON data but got " + data['items_set2']);
        }

        return true;
    }


}

LinkFields.RequiredProperties = ["items_set1", "items_set2"];

/**
 * @member {Array.<String>} items_set1
 */
LinkFields.prototype['items_set1'] = undefined;

/**
 * @member {Array.<String>} items_set2
 */
LinkFields.prototype['items_set2'] = undefined;






export default LinkFields;

