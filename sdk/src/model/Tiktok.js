/**
 * EAS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BaseDraw from './BaseDraw';
import DrawMetadata from './DrawMetadata';
import PrizeField from './PrizeField';
import TiktokFields from './TiktokFields';
import TiktokResult from './TiktokResult';

/**
 * The Tiktok model module.
 * @module model/Tiktok
 * @version 1.0.0
 */
class Tiktok {
    /**
     * Constructs a new <code>Tiktok</code>.
     * @alias module:model/Tiktok
     * @implements module:model/BaseDraw
     * @implements module:model/TiktokFields
     * @param id {String} 
     * @param createdAt {Date} 
     * @param title {String} 
     * @param description {String} 
     * @param payments {Array.<module:model/Tiktok.PaymentsEnum>} 
     * @param prizes {Array.<module:model/PrizeField>} 
     * @param minMentions {Number} 
     * @param postUrl {String} 
     * @param results {Array.<module:model/TiktokResult>} 
     */
    constructor(id, createdAt, title, description, payments, prizes, minMentions, postUrl, results) { 
        BaseDraw.initialize(this, id, createdAt, title, description, payments);TiktokFields.initialize(this, prizes, minMentions, postUrl);
        Tiktok.initialize(this, id, createdAt, title, description, payments, prizes, minMentions, postUrl, results);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, createdAt, title, description, payments, prizes, minMentions, postUrl, results) { 
        obj['id'] = id;
        obj['created_at'] = createdAt;
        obj['title'] = title;
        obj['description'] = description;
        obj['payments'] = payments;
        obj['prizes'] = prizes;
        obj['min_mentions'] = minMentions || 0;
        obj['post_url'] = postUrl;
        obj['results'] = results;
    }

    /**
     * Constructs a <code>Tiktok</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Tiktok} obj Optional instance to populate.
     * @return {module:model/Tiktok} The populated <code>Tiktok</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Tiktok();
            BaseDraw.constructFromObject(data, obj);
            TiktokFields.constructFromObject(data, obj);

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], [DrawMetadata]);
            }
            if (data.hasOwnProperty('payments')) {
                obj['payments'] = ApiClient.convertToType(data['payments'], ['String']);
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('private_id')) {
                obj['private_id'] = ApiClient.convertToType(data['private_id'], 'String');
            }
            if (data.hasOwnProperty('prizes')) {
                obj['prizes'] = ApiClient.convertToType(data['prizes'], [PrizeField]);
            }
            if (data.hasOwnProperty('min_mentions')) {
                obj['min_mentions'] = ApiClient.convertToType(data['min_mentions'], 'Number');
            }
            if (data.hasOwnProperty('post_url')) {
                obj['post_url'] = ApiClient.convertToType(data['post_url'], 'String');
            }
            if (data.hasOwnProperty('results')) {
                obj['results'] = ApiClient.convertToType(data['results'], [TiktokResult]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Tiktok</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Tiktok</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Tiktok.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['metadata']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metadata'])) {
                throw new Error("Expected the field `metadata` to be an array in the JSON data but got " + data['metadata']);
            }
            // validate the optional field `metadata` (array)
            for (const item of data['metadata']) {
                DrawMetadata.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['payments'])) {
            throw new Error("Expected the field `payments` to be an array in the JSON data but got " + data['payments']);
        }
        // ensure the json data is a string
        if (data['private_id'] && !(typeof data['private_id'] === 'string' || data['private_id'] instanceof String)) {
            throw new Error("Expected the field `private_id` to be a primitive type in the JSON string but got " + data['private_id']);
        }
        if (data['prizes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['prizes'])) {
                throw new Error("Expected the field `prizes` to be an array in the JSON data but got " + data['prizes']);
            }
            // validate the optional field `prizes` (array)
            for (const item of data['prizes']) {
                PrizeField.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['post_url'] && !(typeof data['post_url'] === 'string' || data['post_url'] instanceof String)) {
            throw new Error("Expected the field `post_url` to be a primitive type in the JSON string but got " + data['post_url']);
        }
        if (data['results']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['results'])) {
                throw new Error("Expected the field `results` to be an array in the JSON data but got " + data['results']);
            }
            // validate the optional field `results` (array)
            for (const item of data['results']) {
                TiktokResult.validateJSON(item);
            };
        }

        return true;
    }


}

Tiktok.RequiredProperties = ["id", "created_at", "title", "description", "payments", "prizes", "min_mentions", "post_url", "results"];

/**
 * @member {String} id
 */
Tiktok.prototype['id'] = undefined;

/**
 * @member {Date} created_at
 */
Tiktok.prototype['created_at'] = undefined;

/**
 * @member {String} title
 */
Tiktok.prototype['title'] = undefined;

/**
 * @member {String} description
 */
Tiktok.prototype['description'] = undefined;

/**
 * @member {Array.<module:model/DrawMetadata>} metadata
 */
Tiktok.prototype['metadata'] = undefined;

/**
 * @member {Array.<module:model/Tiktok.PaymentsEnum>} payments
 */
Tiktok.prototype['payments'] = undefined;

/**
 * @member {Date} updated_at
 */
Tiktok.prototype['updated_at'] = undefined;

/**
 * @member {String} private_id
 */
Tiktok.prototype['private_id'] = undefined;

/**
 * @member {Array.<module:model/PrizeField>} prizes
 */
Tiktok.prototype['prizes'] = undefined;

/**
 * @member {Number} min_mentions
 * @default 0
 */
Tiktok.prototype['min_mentions'] = 0;

/**
 * @member {String} post_url
 */
Tiktok.prototype['post_url'] = undefined;

/**
 * @member {Array.<module:model/TiktokResult>} results
 */
Tiktok.prototype['results'] = undefined;


// Implement BaseDraw interface:
/**
 * @member {String} id
 */
BaseDraw.prototype['id'] = undefined;
/**
 * @member {Date} created_at
 */
BaseDraw.prototype['created_at'] = undefined;
/**
 * @member {String} title
 */
BaseDraw.prototype['title'] = undefined;
/**
 * @member {String} description
 */
BaseDraw.prototype['description'] = undefined;
/**
 * @member {Array.<module:model/DrawMetadata>} metadata
 */
BaseDraw.prototype['metadata'] = undefined;
/**
 * @member {Array.<module:model/BaseDraw.PaymentsEnum>} payments
 */
BaseDraw.prototype['payments'] = undefined;
/**
 * @member {Date} updated_at
 */
BaseDraw.prototype['updated_at'] = undefined;
/**
 * @member {String} private_id
 */
BaseDraw.prototype['private_id'] = undefined;
// Implement TiktokFields interface:
/**
 * @member {Array.<module:model/PrizeField>} prizes
 */
TiktokFields.prototype['prizes'] = undefined;
/**
 * @member {Number} min_mentions
 * @default 0
 */
TiktokFields.prototype['min_mentions'] = 0;
/**
 * @member {String} post_url
 */
TiktokFields.prototype['post_url'] = undefined;



/**
 * Allowed values for the <code>payments</code> property.
 * @enum {String}
 * @readonly
 */
Tiktok['PaymentsEnum'] = {

    /**
     * value: "CERTIFIED"
     * @const
     */
    "CERTIFIED": "CERTIFIED",

    /**
     * value: "ADFREE"
     * @const
     */
    "ADFREE": "ADFREE",

    /**
     * value: "SUPPORT"
     * @const
     */
    "SUPPORT": "SUPPORT"
};



export default Tiktok;

