/* tslint:disable */
/* eslint-disable */
/**
 * EAS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DrawTossPayload,
  RandomNumber,
  RandomNumberResult,
} from '../models/index';
import {
    DrawTossPayloadFromJSON,
    DrawTossPayloadToJSON,
    RandomNumberFromJSON,
    RandomNumberToJSON,
    RandomNumberResultFromJSON,
    RandomNumberResultToJSON,
} from '../models/index';

export interface RandomNumberCreateRequest {
    randomNumber: RandomNumber;
}

export interface RandomNumberReadRequest {
    id: string;
}

export interface RandomNumberTossRequest {
    id: string;
    drawTossPayload: DrawTossPayload;
}

/**
 * RandomNumberApi - interface
 * 
 * @export
 * @interface RandomNumberApiInterface
 */
export interface RandomNumberApiInterface {
    /**
     * 
     * @param {RandomNumber} randomNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RandomNumberApiInterface
     */
    randomNumberCreateRaw(requestParameters: RandomNumberCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RandomNumber>>;

    /**
     */
    randomNumberCreate(requestParameters: RandomNumberCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RandomNumber>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RandomNumberApiInterface
     */
    randomNumberReadRaw(requestParameters: RandomNumberReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RandomNumber>>;

    /**
     */
    randomNumberRead(requestParameters: RandomNumberReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RandomNumber>;

    /**
     * 
     * @param {string} id 
     * @param {DrawTossPayload} drawTossPayload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RandomNumberApiInterface
     */
    randomNumberTossRaw(requestParameters: RandomNumberTossRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RandomNumberResult>>;

    /**
     */
    randomNumberToss(requestParameters: RandomNumberTossRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RandomNumberResult>;

}

/**
 * 
 */
export class RandomNumberApi extends runtime.BaseAPI implements RandomNumberApiInterface {

    /**
     */
    async randomNumberCreateRaw(requestParameters: RandomNumberCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RandomNumber>> {
        if (requestParameters['randomNumber'] == null) {
            throw new runtime.RequiredError(
                'randomNumber',
                'Required parameter "randomNumber" was null or undefined when calling randomNumberCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/random_number/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RandomNumberToJSON(requestParameters['randomNumber']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RandomNumberFromJSON(jsonValue));
    }

    /**
     */
    async randomNumberCreate(requestParameters: RandomNumberCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RandomNumber> {
        const response = await this.randomNumberCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async randomNumberReadRaw(requestParameters: RandomNumberReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RandomNumber>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling randomNumberRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/random_number/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RandomNumberFromJSON(jsonValue));
    }

    /**
     */
    async randomNumberRead(requestParameters: RandomNumberReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RandomNumber> {
        const response = await this.randomNumberReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async randomNumberTossRaw(requestParameters: RandomNumberTossRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RandomNumberResult>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling randomNumberToss().'
            );
        }

        if (requestParameters['drawTossPayload'] == null) {
            throw new runtime.RequiredError(
                'drawTossPayload',
                'Required parameter "drawTossPayload" was null or undefined when calling randomNumberToss().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/random_number/{id}/toss/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DrawTossPayloadToJSON(requestParameters['drawTossPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RandomNumberResultFromJSON(jsonValue));
    }

    /**
     */
    async randomNumberToss(requestParameters: RandomNumberTossRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RandomNumberResult> {
        const response = await this.randomNumberTossRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
