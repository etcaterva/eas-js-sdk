/* tslint:disable */
/* eslint-disable */
/**
 * EAS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateLotteryPayload,
  DrawTossPayload,
  Lottery,
  LotteryResult,
  Participant,
} from '../models/index';
import {
    CreateLotteryPayloadFromJSON,
    CreateLotteryPayloadToJSON,
    DrawTossPayloadFromJSON,
    DrawTossPayloadToJSON,
    LotteryFromJSON,
    LotteryToJSON,
    LotteryResultFromJSON,
    LotteryResultToJSON,
    ParticipantFromJSON,
    ParticipantToJSON,
} from '../models/index';

export interface LotteryCreateRequest {
    createLotteryPayload: CreateLotteryPayload;
}

export interface LotteryParticipantsAddRequest {
    id: string;
    participant: Participant;
}

export interface LotteryReadRequest {
    id: string;
}

export interface LotteryTossRequest {
    id: string;
    drawTossPayload: DrawTossPayload;
}

/**
 * LotteryApi - interface
 * 
 * @export
 * @interface LotteryApiInterface
 */
export interface LotteryApiInterface {
    /**
     * 
     * @param {CreateLotteryPayload} createLotteryPayload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LotteryApiInterface
     */
    lotteryCreateRaw(requestParameters: LotteryCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Lottery>>;

    /**
     */
    lotteryCreate(requestParameters: LotteryCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Lottery>;

    /**
     * 
     * @param {string} id 
     * @param {Participant} participant 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LotteryApiInterface
     */
    lotteryParticipantsAddRaw(requestParameters: LotteryParticipantsAddRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    lotteryParticipantsAdd(requestParameters: LotteryParticipantsAddRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LotteryApiInterface
     */
    lotteryReadRaw(requestParameters: LotteryReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Lottery>>;

    /**
     */
    lotteryRead(requestParameters: LotteryReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Lottery>;

    /**
     * 
     * @param {string} id 
     * @param {DrawTossPayload} drawTossPayload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LotteryApiInterface
     */
    lotteryTossRaw(requestParameters: LotteryTossRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LotteryResult>>;

    /**
     */
    lotteryToss(requestParameters: LotteryTossRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LotteryResult>;

}

/**
 * 
 */
export class LotteryApi extends runtime.BaseAPI implements LotteryApiInterface {

    /**
     */
    async lotteryCreateRaw(requestParameters: LotteryCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Lottery>> {
        if (requestParameters['createLotteryPayload'] == null) {
            throw new runtime.RequiredError(
                'createLotteryPayload',
                'Required parameter "createLotteryPayload" was null or undefined when calling lotteryCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/lottery/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateLotteryPayloadToJSON(requestParameters['createLotteryPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LotteryFromJSON(jsonValue));
    }

    /**
     */
    async lotteryCreate(requestParameters: LotteryCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Lottery> {
        const response = await this.lotteryCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async lotteryParticipantsAddRaw(requestParameters: LotteryParticipantsAddRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling lotteryParticipantsAdd().'
            );
        }

        if (requestParameters['participant'] == null) {
            throw new runtime.RequiredError(
                'participant',
                'Required parameter "participant" was null or undefined when calling lotteryParticipantsAdd().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/lottery/{id}/participants/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ParticipantToJSON(requestParameters['participant']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async lotteryParticipantsAdd(requestParameters: LotteryParticipantsAddRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.lotteryParticipantsAddRaw(requestParameters, initOverrides);
    }

    /**
     */
    async lotteryReadRaw(requestParameters: LotteryReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Lottery>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling lotteryRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/lottery/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LotteryFromJSON(jsonValue));
    }

    /**
     */
    async lotteryRead(requestParameters: LotteryReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Lottery> {
        const response = await this.lotteryReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async lotteryTossRaw(requestParameters: LotteryTossRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LotteryResult>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling lotteryToss().'
            );
        }

        if (requestParameters['drawTossPayload'] == null) {
            throw new runtime.RequiredError(
                'drawTossPayload',
                'Required parameter "drawTossPayload" was null or undefined when calling lotteryToss().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/lottery/{id}/toss/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DrawTossPayloadToJSON(requestParameters['drawTossPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LotteryResultFromJSON(jsonValue));
    }

    /**
     */
    async lotteryToss(requestParameters: LotteryTossRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LotteryResult> {
        const response = await this.lotteryTossRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
