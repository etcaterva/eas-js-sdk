/* tslint:disable */
/* eslint-disable */
/**
 * EAS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DrawTossPayload,
  Spinner,
  SpinnerResult,
} from '../models/index';
import {
    DrawTossPayloadFromJSON,
    DrawTossPayloadToJSON,
    SpinnerFromJSON,
    SpinnerToJSON,
    SpinnerResultFromJSON,
    SpinnerResultToJSON,
} from '../models/index';

export interface SpinnerCreateRequest {
    spinner: Spinner;
}

export interface SpinnerReadRequest {
    id: string;
}

export interface SpinnerTossRequest {
    id: string;
    drawTossPayload: DrawTossPayload;
}

/**
 * SpinnerApi - interface
 * 
 * @export
 * @interface SpinnerApiInterface
 */
export interface SpinnerApiInterface {
    /**
     * 
     * @param {Spinner} spinner 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpinnerApiInterface
     */
    spinnerCreateRaw(requestParameters: SpinnerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Spinner>>;

    /**
     */
    spinnerCreate(requestParameters: SpinnerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Spinner>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpinnerApiInterface
     */
    spinnerReadRaw(requestParameters: SpinnerReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Spinner>>;

    /**
     */
    spinnerRead(requestParameters: SpinnerReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Spinner>;

    /**
     * 
     * @param {string} id 
     * @param {DrawTossPayload} drawTossPayload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpinnerApiInterface
     */
    spinnerTossRaw(requestParameters: SpinnerTossRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SpinnerResult>>;

    /**
     */
    spinnerToss(requestParameters: SpinnerTossRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SpinnerResult>;

}

/**
 * 
 */
export class SpinnerApi extends runtime.BaseAPI implements SpinnerApiInterface {

    /**
     */
    async spinnerCreateRaw(requestParameters: SpinnerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Spinner>> {
        if (requestParameters['spinner'] == null) {
            throw new runtime.RequiredError(
                'spinner',
                'Required parameter "spinner" was null or undefined when calling spinnerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/spinner/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SpinnerToJSON(requestParameters['spinner']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SpinnerFromJSON(jsonValue));
    }

    /**
     */
    async spinnerCreate(requestParameters: SpinnerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Spinner> {
        const response = await this.spinnerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async spinnerReadRaw(requestParameters: SpinnerReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Spinner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling spinnerRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/spinner/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SpinnerFromJSON(jsonValue));
    }

    /**
     */
    async spinnerRead(requestParameters: SpinnerReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Spinner> {
        const response = await this.spinnerReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async spinnerTossRaw(requestParameters: SpinnerTossRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SpinnerResult>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling spinnerToss().'
            );
        }

        if (requestParameters['drawTossPayload'] == null) {
            throw new runtime.RequiredError(
                'drawTossPayload',
                'Required parameter "drawTossPayload" was null or undefined when calling spinnerToss().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/spinner/{id}/toss/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DrawTossPayloadToJSON(requestParameters['drawTossPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SpinnerResultFromJSON(jsonValue));
    }

    /**
     */
    async spinnerToss(requestParameters: SpinnerTossRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SpinnerResult> {
        const response = await this.spinnerTossRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
