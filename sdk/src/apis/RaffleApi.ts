/* tslint:disable */
/* eslint-disable */
/**
 * EAS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DrawTossPayload,
  Participant,
  Raffle,
  RaffleResult,
} from '../models/index';
import {
    DrawTossPayloadFromJSON,
    DrawTossPayloadToJSON,
    ParticipantFromJSON,
    ParticipantToJSON,
    RaffleFromJSON,
    RaffleToJSON,
    RaffleResultFromJSON,
    RaffleResultToJSON,
} from '../models/index';

export interface RaffleCreateRequest {
    raffle: Raffle;
}

export interface RaffleParticipantsAddRequest {
    id: string;
    participant: Participant;
}

export interface RaffleReadRequest {
    id: string;
}

export interface RaffleTossRequest {
    id: string;
    drawTossPayload: DrawTossPayload;
}

/**
 * RaffleApi - interface
 * 
 * @export
 * @interface RaffleApiInterface
 */
export interface RaffleApiInterface {
    /**
     * 
     * @param {Raffle} raffle 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RaffleApiInterface
     */
    raffleCreateRaw(requestParameters: RaffleCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Raffle>>;

    /**
     */
    raffleCreate(requestParameters: RaffleCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Raffle>;

    /**
     * 
     * @param {string} id 
     * @param {Participant} participant 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RaffleApiInterface
     */
    raffleParticipantsAddRaw(requestParameters: RaffleParticipantsAddRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    raffleParticipantsAdd(requestParameters: RaffleParticipantsAddRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RaffleApiInterface
     */
    raffleReadRaw(requestParameters: RaffleReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Raffle>>;

    /**
     */
    raffleRead(requestParameters: RaffleReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Raffle>;

    /**
     * 
     * @param {string} id 
     * @param {DrawTossPayload} drawTossPayload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RaffleApiInterface
     */
    raffleTossRaw(requestParameters: RaffleTossRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RaffleResult>>;

    /**
     */
    raffleToss(requestParameters: RaffleTossRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RaffleResult>;

}

/**
 * 
 */
export class RaffleApi extends runtime.BaseAPI implements RaffleApiInterface {

    /**
     */
    async raffleCreateRaw(requestParameters: RaffleCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Raffle>> {
        if (requestParameters['raffle'] == null) {
            throw new runtime.RequiredError(
                'raffle',
                'Required parameter "raffle" was null or undefined when calling raffleCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/raffle/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RaffleToJSON(requestParameters['raffle']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RaffleFromJSON(jsonValue));
    }

    /**
     */
    async raffleCreate(requestParameters: RaffleCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Raffle> {
        const response = await this.raffleCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async raffleParticipantsAddRaw(requestParameters: RaffleParticipantsAddRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling raffleParticipantsAdd().'
            );
        }

        if (requestParameters['participant'] == null) {
            throw new runtime.RequiredError(
                'participant',
                'Required parameter "participant" was null or undefined when calling raffleParticipantsAdd().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/raffle/{id}/participants/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ParticipantToJSON(requestParameters['participant']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async raffleParticipantsAdd(requestParameters: RaffleParticipantsAddRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.raffleParticipantsAddRaw(requestParameters, initOverrides);
    }

    /**
     */
    async raffleReadRaw(requestParameters: RaffleReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Raffle>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling raffleRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/raffle/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RaffleFromJSON(jsonValue));
    }

    /**
     */
    async raffleRead(requestParameters: RaffleReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Raffle> {
        const response = await this.raffleReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async raffleTossRaw(requestParameters: RaffleTossRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RaffleResult>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling raffleToss().'
            );
        }

        if (requestParameters['drawTossPayload'] == null) {
            throw new runtime.RequiredError(
                'drawTossPayload',
                'Required parameter "drawTossPayload" was null or undefined when calling raffleToss().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/raffle/{id}/toss/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DrawTossPayloadToJSON(requestParameters['drawTossPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RaffleResultFromJSON(jsonValue));
    }

    /**
     */
    async raffleToss(requestParameters: RaffleTossRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RaffleResult> {
        const response = await this.raffleTossRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
