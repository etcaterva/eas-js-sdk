/* tslint:disable */
/* eslint-disable */
/**
 * EAS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateLinkPayload,
  DrawTossPayload,
  Link,
  LinkResult,
} from '../models/index';
import {
    CreateLinkPayloadFromJSON,
    CreateLinkPayloadToJSON,
    DrawTossPayloadFromJSON,
    DrawTossPayloadToJSON,
    LinkFromJSON,
    LinkToJSON,
    LinkResultFromJSON,
    LinkResultToJSON,
} from '../models/index';

export interface LinkCreateRequest {
    createLinkPayload: CreateLinkPayload;
}

export interface LinkReadRequest {
    id: string;
}

export interface LinkTossRequest {
    id: string;
    drawTossPayload: DrawTossPayload;
}

/**
 * LinkApi - interface
 * 
 * @export
 * @interface LinkApiInterface
 */
export interface LinkApiInterface {
    /**
     * 
     * @param {CreateLinkPayload} createLinkPayload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LinkApiInterface
     */
    linkCreateRaw(requestParameters: LinkCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Link>>;

    /**
     */
    linkCreate(requestParameters: LinkCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Link>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LinkApiInterface
     */
    linkReadRaw(requestParameters: LinkReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Link>>;

    /**
     */
    linkRead(requestParameters: LinkReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Link>;

    /**
     * 
     * @param {string} id 
     * @param {DrawTossPayload} drawTossPayload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LinkApiInterface
     */
    linkTossRaw(requestParameters: LinkTossRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LinkResult>>;

    /**
     */
    linkToss(requestParameters: LinkTossRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LinkResult>;

}

/**
 * 
 */
export class LinkApi extends runtime.BaseAPI implements LinkApiInterface {

    /**
     */
    async linkCreateRaw(requestParameters: LinkCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Link>> {
        if (requestParameters['createLinkPayload'] == null) {
            throw new runtime.RequiredError(
                'createLinkPayload',
                'Required parameter "createLinkPayload" was null or undefined when calling linkCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/link/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateLinkPayloadToJSON(requestParameters['createLinkPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LinkFromJSON(jsonValue));
    }

    /**
     */
    async linkCreate(requestParameters: LinkCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Link> {
        const response = await this.linkCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async linkReadRaw(requestParameters: LinkReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Link>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling linkRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/link/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LinkFromJSON(jsonValue));
    }

    /**
     */
    async linkRead(requestParameters: LinkReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Link> {
        const response = await this.linkReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async linkTossRaw(requestParameters: LinkTossRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LinkResult>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling linkToss().'
            );
        }

        if (requestParameters['drawTossPayload'] == null) {
            throw new runtime.RequiredError(
                'drawTossPayload',
                'Required parameter "drawTossPayload" was null or undefined when calling linkToss().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/link/{id}/toss/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DrawTossPayloadToJSON(requestParameters['drawTossPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LinkResultFromJSON(jsonValue));
    }

    /**
     */
    async linkToss(requestParameters: LinkTossRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LinkResult> {
        const response = await this.linkTossRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
