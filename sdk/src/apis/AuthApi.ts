/* tslint:disable */
/* eslint-disable */
/**
 * EAS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthAcceptSubscription200Response,
  AuthAcceptSubscription400Response,
  AuthCreateSubscription200Response,
  AuthCreateSubscription400Response,
  AuthCreateSubscription500Response,
  AuthCreateSubscriptionRequest,
  AuthCurrentUser200Response,
  AuthCurrentUser401Response,
  AuthRequestMagicLink200Response,
  AuthRequestMagicLink400Response,
  AuthRequestMagicLink500Response,
  AuthRequestMagicLinkRequest,
  AuthSubscriptionTiers200Response,
  AuthVerifyMagicLink400Response,
} from '../models/index';
import {
    AuthAcceptSubscription200ResponseFromJSON,
    AuthAcceptSubscription200ResponseToJSON,
    AuthAcceptSubscription400ResponseFromJSON,
    AuthAcceptSubscription400ResponseToJSON,
    AuthCreateSubscription200ResponseFromJSON,
    AuthCreateSubscription200ResponseToJSON,
    AuthCreateSubscription400ResponseFromJSON,
    AuthCreateSubscription400ResponseToJSON,
    AuthCreateSubscription500ResponseFromJSON,
    AuthCreateSubscription500ResponseToJSON,
    AuthCreateSubscriptionRequestFromJSON,
    AuthCreateSubscriptionRequestToJSON,
    AuthCurrentUser200ResponseFromJSON,
    AuthCurrentUser200ResponseToJSON,
    AuthCurrentUser401ResponseFromJSON,
    AuthCurrentUser401ResponseToJSON,
    AuthRequestMagicLink200ResponseFromJSON,
    AuthRequestMagicLink200ResponseToJSON,
    AuthRequestMagicLink400ResponseFromJSON,
    AuthRequestMagicLink400ResponseToJSON,
    AuthRequestMagicLink500ResponseFromJSON,
    AuthRequestMagicLink500ResponseToJSON,
    AuthRequestMagicLinkRequestFromJSON,
    AuthRequestMagicLinkRequestToJSON,
    AuthSubscriptionTiers200ResponseFromJSON,
    AuthSubscriptionTiers200ResponseToJSON,
    AuthVerifyMagicLink400ResponseFromJSON,
    AuthVerifyMagicLink400ResponseToJSON,
} from '../models/index';

export interface AuthAcceptSubscriptionRequest {
    sessionId: string;
}

export interface AuthCreateSubscriptionOperationRequest {
    authCreateSubscriptionRequest: AuthCreateSubscriptionRequest;
}

export interface AuthRequestMagicLinkOperationRequest {
    authRequestMagicLinkRequest: AuthRequestMagicLinkRequest;
}

export interface AuthVerifyMagicLinkRequest {
    token: string;
}

/**
 * AuthApi - interface
 * 
 * @export
 * @interface AuthApiInterface
 */
export interface AuthApiInterface {
    /**
     * Validate Stripe subscription, log in the user, and redirect to draw URL
     * @summary Accept subscription and log in user
     * @param {string} sessionId Stripe checkout session ID from the success callback
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authAcceptSubscriptionRaw(requestParameters: AuthAcceptSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthAcceptSubscription200Response>>;

    /**
     * Validate Stripe subscription, log in the user, and redirect to draw URL
     * Accept subscription and log in user
     */
    authAcceptSubscription(requestParameters: AuthAcceptSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthAcceptSubscription200Response>;

    /**
     * Create a Stripe subscription checkout session for the given subscription key
     * @summary Create a subscription checkout session
     * @param {AuthCreateSubscriptionRequest} authCreateSubscriptionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authCreateSubscriptionRaw(requestParameters: AuthCreateSubscriptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthCreateSubscription200Response>>;

    /**
     * Create a Stripe subscription checkout session for the given subscription key
     * Create a subscription checkout session
     */
    authCreateSubscription(requestParameters: AuthCreateSubscriptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthCreateSubscription200Response>;

    /**
     * Get information about the currently authenticated user
     * @summary Get current user information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authCurrentUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthCurrentUser200Response>>;

    /**
     * Get information about the currently authenticated user
     * Get current user information
     */
    authCurrentUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthCurrentUser200Response>;

    /**
     * Log out the currently authenticated user
     * @summary Log out current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authLogoutRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Log out the currently authenticated user
     * Log out current user
     */
    authLogout(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Send a magic link to user\'s email for passwordless authentication
     * @summary Request magic link for passwordless login
     * @param {AuthRequestMagicLinkRequest} authRequestMagicLinkRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authRequestMagicLinkRaw(requestParameters: AuthRequestMagicLinkOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthRequestMagicLink200Response>>;

    /**
     * Send a magic link to user\'s email for passwordless authentication
     * Request magic link for passwordless login
     */
    authRequestMagicLink(requestParameters: AuthRequestMagicLinkOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthRequestMagicLink200Response>;

    /**
     * Get information about all available subscription tiers and their limits
     * @summary Get available subscription tiers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authSubscriptionTiersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthSubscriptionTiers200Response>>;

    /**
     * Get information about all available subscription tiers and their limits
     * Get available subscription tiers
     */
    authSubscriptionTiers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthSubscriptionTiers200Response>;

    /**
     * Verify the magic link token, authenticate the user, and redirect to return_url if provided
     * @summary Verify magic link and log user in
     * @param {string} token Magic link token from email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authVerifyMagicLinkRaw(requestParameters: AuthVerifyMagicLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Verify the magic link token, authenticate the user, and redirect to return_url if provided
     * Verify magic link and log user in
     */
    authVerifyMagicLink(requestParameters: AuthVerifyMagicLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI implements AuthApiInterface {

    /**
     * Validate Stripe subscription, log in the user, and redirect to draw URL
     * Accept subscription and log in user
     */
    async authAcceptSubscriptionRaw(requestParameters: AuthAcceptSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthAcceptSubscription200Response>> {
        if (requestParameters['sessionId'] == null) {
            throw new runtime.RequiredError(
                'sessionId',
                'Required parameter "sessionId" was null or undefined when calling authAcceptSubscription().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['sessionId'] != null) {
            queryParameters['session_id'] = requestParameters['sessionId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/subscription/accept/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthAcceptSubscription200ResponseFromJSON(jsonValue));
    }

    /**
     * Validate Stripe subscription, log in the user, and redirect to draw URL
     * Accept subscription and log in user
     */
    async authAcceptSubscription(requestParameters: AuthAcceptSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthAcceptSubscription200Response> {
        const response = await this.authAcceptSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a Stripe subscription checkout session for the given subscription key
     * Create a subscription checkout session
     */
    async authCreateSubscriptionRaw(requestParameters: AuthCreateSubscriptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthCreateSubscription200Response>> {
        if (requestParameters['authCreateSubscriptionRequest'] == null) {
            throw new runtime.RequiredError(
                'authCreateSubscriptionRequest',
                'Required parameter "authCreateSubscriptionRequest" was null or undefined when calling authCreateSubscription().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/subscription/create/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthCreateSubscriptionRequestToJSON(requestParameters['authCreateSubscriptionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthCreateSubscription200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a Stripe subscription checkout session for the given subscription key
     * Create a subscription checkout session
     */
    async authCreateSubscription(requestParameters: AuthCreateSubscriptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthCreateSubscription200Response> {
        const response = await this.authCreateSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get information about the currently authenticated user
     * Get current user information
     */
    async authCurrentUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthCurrentUser200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/user/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthCurrentUser200ResponseFromJSON(jsonValue));
    }

    /**
     * Get information about the currently authenticated user
     * Get current user information
     */
    async authCurrentUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthCurrentUser200Response> {
        const response = await this.authCurrentUserRaw(initOverrides);
        return await response.value();
    }

    /**
     * Log out the currently authenticated user
     * Log out current user
     */
    async authLogoutRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/logout/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Log out the currently authenticated user
     * Log out current user
     */
    async authLogout(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authLogoutRaw(initOverrides);
    }

    /**
     * Send a magic link to user\'s email for passwordless authentication
     * Request magic link for passwordless login
     */
    async authRequestMagicLinkRaw(requestParameters: AuthRequestMagicLinkOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthRequestMagicLink200Response>> {
        if (requestParameters['authRequestMagicLinkRequest'] == null) {
            throw new runtime.RequiredError(
                'authRequestMagicLinkRequest',
                'Required parameter "authRequestMagicLinkRequest" was null or undefined when calling authRequestMagicLink().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/login/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthRequestMagicLinkRequestToJSON(requestParameters['authRequestMagicLinkRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthRequestMagicLink200ResponseFromJSON(jsonValue));
    }

    /**
     * Send a magic link to user\'s email for passwordless authentication
     * Request magic link for passwordless login
     */
    async authRequestMagicLink(requestParameters: AuthRequestMagicLinkOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthRequestMagicLink200Response> {
        const response = await this.authRequestMagicLinkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get information about all available subscription tiers and their limits
     * Get available subscription tiers
     */
    async authSubscriptionTiersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthSubscriptionTiers200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/tiers/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthSubscriptionTiers200ResponseFromJSON(jsonValue));
    }

    /**
     * Get information about all available subscription tiers and their limits
     * Get available subscription tiers
     */
    async authSubscriptionTiers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthSubscriptionTiers200Response> {
        const response = await this.authSubscriptionTiersRaw(initOverrides);
        return await response.value();
    }

    /**
     * Verify the magic link token, authenticate the user, and redirect to return_url if provided
     * Verify magic link and log user in
     */
    async authVerifyMagicLinkRaw(requestParameters: AuthVerifyMagicLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling authVerifyMagicLink().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/verify/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Verify the magic link token, authenticate the user, and redirect to return_url if provided
     * Verify magic link and log user in
     */
    async authVerifyMagicLink(requestParameters: AuthVerifyMagicLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authVerifyMagicLinkRaw(requestParameters, initOverrides);
    }

}
