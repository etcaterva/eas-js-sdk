/* tslint:disable */
/* eslint-disable */
/**
 * EAS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateGroupsPayload,
  DrawTossPayload,
  Groups,
  GroupsResult,
  Participant,
} from '../models/index';
import {
    CreateGroupsPayloadFromJSON,
    CreateGroupsPayloadToJSON,
    DrawTossPayloadFromJSON,
    DrawTossPayloadToJSON,
    GroupsFromJSON,
    GroupsToJSON,
    GroupsResultFromJSON,
    GroupsResultToJSON,
    ParticipantFromJSON,
    ParticipantToJSON,
} from '../models/index';

export interface GroupsCreateRequest {
    createGroupsPayload: CreateGroupsPayload;
}

export interface GroupsParticipantsAddRequest {
    id: string;
    participant: Participant;
}

export interface GroupsReadRequest {
    id: string;
}

export interface GroupsTossRequest {
    id: string;
    drawTossPayload: DrawTossPayload;
}

/**
 * GroupsApi - interface
 * 
 * @export
 * @interface GroupsApiInterface
 */
export interface GroupsApiInterface {
    /**
     * 
     * @param {CreateGroupsPayload} createGroupsPayload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsCreateRaw(requestParameters: GroupsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Groups>>;

    /**
     */
    groupsCreate(requestParameters: GroupsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Groups>;

    /**
     * 
     * @param {string} id 
     * @param {Participant} participant 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsParticipantsAddRaw(requestParameters: GroupsParticipantsAddRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    groupsParticipantsAdd(requestParameters: GroupsParticipantsAddRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsReadRaw(requestParameters: GroupsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Groups>>;

    /**
     */
    groupsRead(requestParameters: GroupsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Groups>;

    /**
     * 
     * @param {string} id 
     * @param {DrawTossPayload} drawTossPayload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsTossRaw(requestParameters: GroupsTossRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupsResult>>;

    /**
     */
    groupsToss(requestParameters: GroupsTossRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupsResult>;

}

/**
 * 
 */
export class GroupsApi extends runtime.BaseAPI implements GroupsApiInterface {

    /**
     */
    async groupsCreateRaw(requestParameters: GroupsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Groups>> {
        if (requestParameters['createGroupsPayload'] == null) {
            throw new runtime.RequiredError(
                'createGroupsPayload',
                'Required parameter "createGroupsPayload" was null or undefined when calling groupsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/groups/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateGroupsPayloadToJSON(requestParameters['createGroupsPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupsFromJSON(jsonValue));
    }

    /**
     */
    async groupsCreate(requestParameters: GroupsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Groups> {
        const response = await this.groupsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async groupsParticipantsAddRaw(requestParameters: GroupsParticipantsAddRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling groupsParticipantsAdd().'
            );
        }

        if (requestParameters['participant'] == null) {
            throw new runtime.RequiredError(
                'participant',
                'Required parameter "participant" was null or undefined when calling groupsParticipantsAdd().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/groups/{id}/participants/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ParticipantToJSON(requestParameters['participant']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async groupsParticipantsAdd(requestParameters: GroupsParticipantsAddRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.groupsParticipantsAddRaw(requestParameters, initOverrides);
    }

    /**
     */
    async groupsReadRaw(requestParameters: GroupsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Groups>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling groupsRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/groups/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupsFromJSON(jsonValue));
    }

    /**
     */
    async groupsRead(requestParameters: GroupsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Groups> {
        const response = await this.groupsReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async groupsTossRaw(requestParameters: GroupsTossRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupsResult>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling groupsToss().'
            );
        }

        if (requestParameters['drawTossPayload'] == null) {
            throw new runtime.RequiredError(
                'drawTossPayload',
                'Required parameter "drawTossPayload" was null or undefined when calling groupsToss().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/groups/{id}/toss/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DrawTossPayloadToJSON(requestParameters['drawTossPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupsResultFromJSON(jsonValue));
    }

    /**
     */
    async groupsToss(requestParameters: GroupsTossRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupsResult> {
        const response = await this.groupsTossRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
