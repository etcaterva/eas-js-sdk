/* tslint:disable */
/* eslint-disable */
/**
 * EAS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateLetterPayload,
  DrawTossPayload,
  Letter,
  LetterResult,
} from '../models/index';
import {
    CreateLetterPayloadFromJSON,
    CreateLetterPayloadToJSON,
    DrawTossPayloadFromJSON,
    DrawTossPayloadToJSON,
    LetterFromJSON,
    LetterToJSON,
    LetterResultFromJSON,
    LetterResultToJSON,
} from '../models/index';

export interface LetterCreateRequest {
    createLetterPayload: CreateLetterPayload;
}

export interface LetterReadRequest {
    id: string;
}

export interface LetterTossRequest {
    id: string;
    drawTossPayload: DrawTossPayload;
}

/**
 * LetterApi - interface
 * 
 * @export
 * @interface LetterApiInterface
 */
export interface LetterApiInterface {
    /**
     * 
     * @param {CreateLetterPayload} createLetterPayload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LetterApiInterface
     */
    letterCreateRaw(requestParameters: LetterCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Letter>>;

    /**
     */
    letterCreate(requestParameters: LetterCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Letter>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LetterApiInterface
     */
    letterReadRaw(requestParameters: LetterReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Letter>>;

    /**
     */
    letterRead(requestParameters: LetterReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Letter>;

    /**
     * 
     * @param {string} id 
     * @param {DrawTossPayload} drawTossPayload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LetterApiInterface
     */
    letterTossRaw(requestParameters: LetterTossRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LetterResult>>;

    /**
     */
    letterToss(requestParameters: LetterTossRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LetterResult>;

}

/**
 * 
 */
export class LetterApi extends runtime.BaseAPI implements LetterApiInterface {

    /**
     */
    async letterCreateRaw(requestParameters: LetterCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Letter>> {
        if (requestParameters['createLetterPayload'] == null) {
            throw new runtime.RequiredError(
                'createLetterPayload',
                'Required parameter "createLetterPayload" was null or undefined when calling letterCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/letter/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateLetterPayloadToJSON(requestParameters['createLetterPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LetterFromJSON(jsonValue));
    }

    /**
     */
    async letterCreate(requestParameters: LetterCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Letter> {
        const response = await this.letterCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async letterReadRaw(requestParameters: LetterReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Letter>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling letterRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/letter/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LetterFromJSON(jsonValue));
    }

    /**
     */
    async letterRead(requestParameters: LetterReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Letter> {
        const response = await this.letterReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async letterTossRaw(requestParameters: LetterTossRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LetterResult>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling letterToss().'
            );
        }

        if (requestParameters['drawTossPayload'] == null) {
            throw new runtime.RequiredError(
                'drawTossPayload',
                'Required parameter "drawTossPayload" was null or undefined when calling letterToss().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/letter/{id}/toss/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DrawTossPayloadToJSON(requestParameters['drawTossPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LetterResultFromJSON(jsonValue));
    }

    /**
     */
    async letterToss(requestParameters: LetterTossRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LetterResult> {
        const response = await this.letterTossRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
